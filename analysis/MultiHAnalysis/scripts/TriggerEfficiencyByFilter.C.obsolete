#include <Riostream.h>
#include <TH1F.h>
#include <TTree.h>
#include <TTreeFormula.h>
#include <TFile.h>
#include <TCanvas.h>
#include "TTreeReaderArray.h"
#include "TTreeReader.h"
#include "TGraphAsymmErrors.h"
#include "TROOT.h"
#include <thread>

template<typename T , typename V>
void customBinCreator(std::vector<T>& theOutputBinVector, V&& xMin)
{
  return;
}

template<typename T, typename V, typename... BinList>
void customBinCreator(std::vector<T>& theOutputBinVector, V&& xMin, V&& xMax, V&& binSize, BinList&&... theBinList)
{
  uint nBins = (xMax - xMin)/binSize;
  if(theOutputBinVector.size()==0) theOutputBinVector.push_back(xMin);
  for(uint bin=1; bin<=nBins; ++bin) theOutputBinVector.push_back( xMin + (xMax-xMin)*(float(bin)/float(nBins)) );
  customBinCreator(theOutputBinVector, xMax, theBinList...);
}

template<typename T, typename V, typename... BinList>
void customBinCreator(std::vector<T>& theOutputBinVector, V&& xMin, BinList&&... theBinList);


struct TriggerEfficiencyTool
{
  TriggerEfficiencyTool(std::string datasetName, TTree* inputTree, TTreeReader* theTreeReader, std::string triggerName, std::string filterCut, std::string variable, std::string normalizationCut, std::string plotTitle, std::vector<float> binVector, Color_t theColor)
    : fVariableHandler(*theTreeReader, variable.data())
    , fFilterEfficiencyCut("filterEfficiencyCut", filterCut.data(), inputTree)
    , fNormalizationEfficiencyCut("normalizationEfficiencyCut", normalizationCut.data(), inputTree)
  {
    std::string plotName =  plotTitle.substr(0, plotTitle.find(";"));
    fFilterEfficiencyHistogram = std::make_shared<TH1F>((datasetName + "_" + triggerName + "_Normalization_"+plotName).data(), ("Normalization "+plotTitle).data(), binVector.size()-1, binVector.data());
    fFilterEfficiencyHistogram->SetDirectory(0);
    fFilterEfficiencyHistogram->Sumw2();
    fFilterEfficiencyHistogram->SetLineColor(theColor);
    fFilterEfficiencyHistogram->SetMarkerColor(theColor);

    fFilterNormalizationHistogram = std::make_shared<TH1F>((datasetName + "_" + triggerName + "_Distribution_"+plotName).data(), ("Distribution "+plotTitle).data(), binVector.size()-1, binVector.data());
    fFilterNormalizationHistogram->SetDirectory(0);
    fFilterNormalizationHistogram->Sumw2();
    fFilterNormalizationHistogram->SetLineColor(theColor);
    fFilterNormalizationHistogram->SetMarkerColor(theColor);


    fEfficiency = std::make_shared<TGraphAsymmErrors>();
    fEfficiency->SetNameTitle((datasetName + "_" + triggerName + "_Efficiency_"+plotName).data(), ("Efficiency "+plotTitle).data());
    fEfficiency->GetYaxis()->SetRangeUser(0., 1.2);
    fEfficiency->SetLineColor(theColor);
    fEfficiency->SetMarkerColor(theColor);
  }

  ~TriggerEfficiencyTool()
  {
  }

  void fillEfficiency(float weightValue, float btag_SFValue)
  {
    std::cout << "\n====== fillEfficiency:  weightValue="<<weightValue<<std::endl;
    if (fNormalizationEfficiencyCut.EvalInstance())
      {
	float variableValue = *fVariableHandler.Get();
	fFilterNormalizationHistogram->Fill(variableValue, weightValue);
	if(fFilterEfficiencyCut.EvalInstance())
	  {
	    fFilterEfficiencyHistogram->Fill(variableValue, weightValue);
	  }
      }   
  }

  std::tuple<std::shared_ptr<TGraphAsymmErrors>,std::shared_ptr<TH1F> > getEfficiencyAndDistribution(float renormalizationValue)
  {
    int numberOfEntries =  fFilterEfficiencyHistogram.get()->GetNbinsX();
    
    std::cout << "Number of Entries = "<<numberOfEntries<<std::endl;
    
    for(Int_t i = 0; i < numberOfEntries+1; ++i) {
      if(fFilterEfficiencyHistogram.get()->GetBinContent(i) > fFilterNormalizationHistogram.get()->GetBinContent(i)) {
	TCanvas theTmpCanvas("c1", "c1");
	auto tmpNormalization = (TH1F*)fFilterNormalizationHistogram.get()->Clone("fTmpNormalization");
	auto tmpEfficiency    = (TH1F*)fFilterEfficiencyHistogram   .get()->Clone("fTmpEfficiency"   );
	tmpNormalization->SetDirectory(0);
	tmpEfficiency   ->SetDirectory(0);
	tmpNormalization->SetLineColor(kBlue);
	tmpEfficiency   ->SetLineColor(kRed );
	tmpNormalization->Draw("hist");
	tmpEfficiency   ->Draw("same");
	theTmpCanvas.SaveAs("tmpsCanvas.png");
	delete tmpNormalization;
	delete tmpEfficiency   ;
	std::cout<<"NumberOfEntries not consisten for Bin " << i << " values - "<<  fFilterEfficiencyHistogram.get()->GetBinContent(0) << " - " << fFilterNormalizationHistogram.get()->GetBinContent(0) << std::endl;
	fFilterEfficiencyHistogram.get()->SetBinContent(i,0.);
	fFilterNormalizationHistogram.get()->SetBinContent(i,0.);
      }
    }
    std::cout << "HERE 5"<<std::endl;
    fEfficiency->Divide(fFilterEfficiencyHistogram.get(),fFilterNormalizationHistogram.get(),"cl=0.683 b(1,1) mode");
    fFilterNormalizationHistogram->Scale(renormalizationValue);
    std::cout << "HERE 6"<<std::endl;
    for(int bin=0; bin<= fFilterNormalizationHistogram->GetNbinsX(); ++bin)
      {
	float binWidth =  fFilterNormalizationHistogram->GetBinWidth(bin);
	fFilterNormalizationHistogram->SetBinContent(bin, fFilterNormalizationHistogram->GetBinContent(bin)/binWidth);
	fFilterNormalizationHistogram->SetBinError  (bin, fFilterNormalizationHistogram->GetBinError  (bin)/binWidth);
      }
    return {fEfficiency, fFilterNormalizationHistogram};
  }
  
  TTreeReaderValue<float> fVariableHandler;
  std::shared_ptr<TH1F> fFilterEfficiencyHistogram;
  std::shared_ptr<TH1F> fFilterNormalizationHistogram;
  std::shared_ptr<TGraphAsymmErrors> fEfficiency;
  TTreeFormula fFilterEfficiencyCut;
  TTreeFormula fNormalizationEfficiencyCut;
  
  // stringhe con cut!!!
};

struct DatasetEfficiencyEvaluator
{
  DatasetEfficiencyEvaluator(std::string inputFileName, std::string datasetName, float expectedNumberOfEvents)
    : fInputFileName(inputFileName)
    , fDatasetName(datasetName)
    , fRenormalizationValue(1.)
  {
    fInputFile = TFile::Open(inputFileName.data());
    if(fInputFile == nullptr)
      {
	std::cout << "File " << inputFileName << " does not exist. Aborting..." << std::endl;
      }
    fInputTree = (TTree*)fInputFile->Get("TrgTree");
    fTheTreeReader  = new TTreeReader(fInputTree);
    fWeightHandler  = new TTreeReaderValue<float>(*fTheTreeReader, "weight" );
    fBtag_SFHandler = new TTreeReaderValue<float>(*fTheTreeReader, "btag_SF");
    
    if(expectedNumberOfEvents>0) fRenormalizationValue = expectedNumberOfEvents/static_cast<TH1F*>(fInputFile->Get("eff_histo"))->GetBinContent(2);
  }
  
  ~DatasetEfficiencyEvaluator()
  {
    for(auto& efficiencyTool : fTriggerEfficiencyToolVector) delete efficiencyTool;
    fTriggerEfficiencyToolVector.clear();
    delete fWeightHandler;
    delete fBtag_SFHandler;
    delete fTheTreeReader;
    fInputFile->Close();
    delete fInputFile;
  }
  
  void addTrigger(std::string triggerName, std::string filterCut, std::string variable, std::string normalizationCut, std::string plotTitle, std::vector<float> binVector, Color_t theColor)
  {
    fTriggerEfficiencyToolVector.emplace_back(new TriggerEfficiencyTool(fDatasetName, fInputTree, fTheTreeReader, triggerName, filterCut, variable, normalizationCut, plotTitle, binVector, theColor));
  }
  
  void addTrigger(std::string triggerName, std::string filterCut, std::string variable, std::string normalizationCut, std::string plotTitle, uint nBins, float xMin, float xMax, Color_t theColor)
  {
    std::vector<float> binVector(nBins+1);
    for(uint bin=0; bin<=nBins; ++bin) binVector[bin] = xMin + (xMax-xMin)*(float(bin)/float(nBins));
    addTrigger(triggerName, filterCut, variable, normalizationCut, plotTitle, binVector, theColor);
  }
  
  void fillTriggerEfficiency()
  {
    for(int it=0; it<fInputTree->GetEntries(); ++it)
      {
	std::cout << "Get Entry ("<<it<<") "<<std::endl;
	fInputTree->GetEntry(it);
	
	std::cout << "Success."<<std::endl;
	
	fTheTreeReader->Next();
	float weightValue   = *fWeightHandler ->Get();
	float btag_SFValue  = *fBtag_SFHandler->Get();
	/*
	for(auto& triggerEfficiency : fTriggerEfficiencyToolVector )
	  {
	    std::cout << "fill trigger efficiency with weightValue = "<<weightValue<<std::endl;
	    triggerEfficiency->fillEfficiency(weightValue, btag_SFValue);
	  }
	*/
      }
  }
  
  std::vector<std::tuple<std::shared_ptr<TGraphAsymmErrors>,std::shared_ptr<TH1F> > > getEfficiencyAndDistribution()
  {
    std::vector<std::tuple<std::shared_ptr<TGraphAsymmErrors>,std::shared_ptr<TH1F> > > result;
    for(auto& triggerEfficiency : fTriggerEfficiencyToolVector ) result.emplace_back(triggerEfficiency->getEfficiencyAndDistribution(fRenormalizationValue));
    return result;
  }
  
  std::vector<TriggerEfficiencyTool*> fTriggerEfficiencyToolVector;
  std::string fInputFileName;
  std::string fDatasetName;
  float fRenormalizationValue;
  TFile *fInputFile;
  TTree *fInputTree;
  TTreeReader *fTheTreeReader;
  TTreeReaderValue<float> *fWeightHandler;
  TTreeReaderValue<float> *fBtag_SFHandler;
};


//--------------------------- Trigger efficiency 2017 ------------------------------------------
void ProduceAllTriggerEfficiencyInAFile2017(std::vector<std::tuple<std::shared_ptr<TGraphAsymmErrors>,
					    std::shared_ptr<TH1F> > >& theOutputResultVector,
					    std::string inputFileName,
					    std::string datasetName,
					    float expectedNumberOfEvents, Color_t theColor, bool useTTbarCut)
{
  DatasetEfficiencyEvaluator theEfficiencyEvaluator(inputFileName, datasetName, expectedNumberOfEvents);
  std::cout << "datasetName = "<<datasetName<<std::endl;
  
  std::string preselectionCut  = "1";
  std::string preselectionBTag = "";
  if(useTTbarCut && datasetName != "NMSSM" ) preselectionCut   = "highestIsoElecton_pt>10. && electronTimesMuoncharge<0.";
  std::vector<float> customBinning;
  bool isSingleMuon = (datasetName == "SingleMuon");
  
  std::string triggerName = "";
  
  // Filter: For L1 HT
  std::cout << "Filter :  For L1 HT"<<std::endl;
  std::string normalizationCut = preselectionCut;
  std::string filterCut = normalizationCut + "&& QuadCentralJet30>=1";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "caloJetSum", normalizationCut, "L1filterHT; #sum p_{T} [GeV]; online efficiency"                 ,60, 100, 1500, theColor);
  
  // Filter: hltQuadCentralJet30
  std::cout << "Filter: hltQuadCentralJet30"<<std::endl;
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& QuadCentralJet30>=4";
  customBinning.clear();
  customBinCreator(customBinning, 20., 100., 5.,  180., 20.,  220., 40.,  300., 40.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetForthHighestPt_pt", normalizationCut, "QuadCentralJet30; p_{T}^{4} [GeV]; online efficiency", customBinning, theColor);
  
  // Filter: hltCaloQuadJet30HT300
  std::cout << "Filter: hltCaloQuadJet30HT300"<<std::endl;
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& CaloQuadJet30HT300_MaxHT>=300 && numberOfJetsCaloHT>=4";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "caloJetSum", normalizationCut, "CaloQuadJet30HT300; #sum p_{T} with p_{T}>30 GeV [GeV]; online efficiency", 50, 200., 1200., theColor);
  
  // Filter: hltBTagCaloCSVp05Double
  std::cout << "Filter: hltBTagCaloCSVp05Double"<<std::endl;
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& BTagCaloCSVp05Double_jetFirstHighestDeepFlavB_triggerFlag>=1";
  customBinning.clear();
  customBinCreator(customBinning, 0., 0.5, 0.1, 0.9, 0.08,  1., 0.02);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetFirstHighestDeepFlavB_deepFlavB", normalizationCut, "BTagCaloCSVp05Double; DeepFlavB^{1}; online efficliency", customBinning, theColor);
  
  // Filter: hltPFCentralJetLooseIDQuad30
  std::cout << "Filter: hltPFCentralJetLooseIDQuad30"<<std::endl;
  normalizationCut = normalizationCut + "&& BTagCaloCSVp05Double>=2";
  filterCut = normalizationCut + "&& PFCentralJetLooseIDQuad30>=4";
  customBinning.clear();
  customBinCreator(customBinning, 20., 80., 5., 120., 10., 200., 40.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetForthHighestPt_pt", normalizationCut, "PFCentralJetLooseIDQuad30; p_{T}^{4} [GeV]; online efficiency", customBinning, theColor);
  
  // Filter: hlt1PFCentralJetLooseID75
  std::cout << "Filter: hlt1PFCentralJetLooseID75"<<std::endl;
  normalizationCut = normalizationCut;
  filterCut = normalizationCut + "&& 1PFCentralJetLooseID75>=1";
  customBinning.clear();
  customBinCreator(customBinning, 20., 200., 10.,  500., 20.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetFirstHighestPt_pt", normalizationCut, "1PFCentralJetLooseID75; p_{T}^{1} [GeV]; online efficiency", customBinning, theColor);
  
  // Filter: hlt2PFCentralJetLooseID60
  std::cout << "Filter: hlt2PFCentralJetLooseID60"<<std::endl;
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& 2PFCentralJetLooseID60>=2";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetSecondHighestPt_pt", normalizationCut, "2PFCentralJetLooseID60; p_{T}^{2} [GeV]; online efficiency", 40, 20 , 300, theColor);
  
  // Filter: hlt3PFCentralJetLooseID45
  std::cout << "Filter: hlt3PFCentralJetLooseID45"<<std::endl;
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& 3PFCentralJetLooseID45>=3";
  customBinning.clear();
  customBinCreator(customBinning, 20., 140., 6.,  180., 20., 300., 60.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetThirdHighestPt_pt", normalizationCut, "3PFCentralJetLooseID45; p_{T}^{3} [GeV]; online efficiency", customBinning, theColor);
  
  // Filter: hlt4PFCentralJetLooseID40
  std::cout << "Filter: hlt4PFCentralJetLooseID40"<<std::endl;
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& 4PFCentralJetLooseID40>=4";
  customBinning.clear();
  customBinCreator(customBinning, 20., 80., 5., 120., 10., 200., 20.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetForthHighestPt_pt", normalizationCut, "4PFCentralJetLooseID40; p_{T}^{4} [GeV]; online efficiency", customBinning, theColor);
  
  // Filter: hltPFCentralJetsLooseIDQuad30HT300
  std::cout << "Filter: hltPFCentralJetsLooseIDQuad30HT300"<<std::endl;
  normalizationCut = filterCut;
  customBinning.clear();
  customBinCreator(customBinning, 200., 300., 100., 1500., 30.);
  filterCut = normalizationCut + "&& PFCentralJetsLooseIDQuad30HT300_MaxHT>=300 && numberOfJetsPfHT>=4";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "pfJetSum", normalizationCut, "PFCentralJetsLooseIDQuad30HT300; #sum p_{T} with p_{T}>30 GeV [GeV]; online efficiency", customBinning, theColor);
  
  // Filter: hltBTagPFCSVp070Triple
  std::cout << "Filter: hltBTagPFCSVp070Triple"<<std::endl;
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& BTagPFCSVp070Triple_jetFirstHighestDeepFlavB_triggerFlag>=1";
  customBinning.clear();
  std::cout << "Custom binning"<<std::endl;
  if(isSingleMuon) customBinCreator(customBinning, 0., 0.8, 0.05, 1., 0.04);
  else             customBinCreator(customBinning, 0., 0.6, 0.15, 0.9, 0.06,  1., 0.02);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetFirstHighestDeepFlavB_deepFlavB", normalizationCut, "BTagPFCSVp070Triple; DeepFlavB^{1}; online efficliency", customBinning, theColor);
  
  std::cout << "After last filter"<<std::endl;
  
  theEfficiencyEvaluator.fillTriggerEfficiency();
  std::cout << "Get the output result vector"<<std::endl;
  theOutputResultVector = theEfficiencyEvaluator.getEfficiencyAndDistribution();
  
}

//--------------------------- Trigger efficiency 2018 ------------------------------------------
void ProduceAllTriggerEfficiencyInAFile2018(std::vector<std::tuple<std::shared_ptr<TGraphAsymmErrors>, 
					    std::shared_ptr<TH1F> > >& theOutputResultVector, 
					    std::string inputFileName,
					    std::string datasetName,
					    float expectedNumberOfEvents, Color_t theColor, bool useTTbarCut)
{
  DatasetEfficiencyEvaluator theEfficiencyEvaluator(inputFileName, datasetName, expectedNumberOfEvents);
  
  std::cout << "\n ======= ProduceAllTriggerEfficiencyInAFile2018"<<std::endl;
  std::cout << "datasetName = "<<datasetName<<std::endl;
  
  std::string preselectionCut  = "1";
  std::string preselectionBTag = "";
  if(useTTbarCut && datasetName != "NMSSM" ) preselectionCut   = "highestIsoElecton_pt>10. && electronTimesMuoncharge<0.";
  std::vector<float> customBinning;
  bool isSingleMuon = (datasetName == "SingleMuon");
  
  std::string triggerName = "";
  
  std::string normalizationCut = preselectionCut;
  std::string filterCut = normalizationCut + "&& QuadCentralJet30>=1";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "caloJetSum", normalizationCut, "L1filterHT; #sum p_{T} [GeV]; online efficiency", 60, 100, 1500, theColor);

  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& QuadCentralJet30>=4";
  customBinning.clear();
  customBinCreator(customBinning, 20., 100., 5.,  180., 20.,  220., 40.,  300., 40.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetForthHighestPt_pt", normalizationCut, "QuadCentralJet30; p_{T}^{4} [GeV]; online efficiency", customBinning, theColor);
  
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& CaloQuadJet30HT320_MaxHT>=320 && numberOfJetsCaloHT>=4";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "caloJetSum", normalizationCut, "CaloQuadJet30HT320; #sum p_{T} with p_{T}>30 GeV [GeV]; online efficiency", 50, 200., 1200., theColor);
  
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& BTagCaloDeepCSVp17Double_jetFirstHighestDeepFlavB_triggerFlag>=1";
  customBinning.clear();
  customBinCreator(customBinning, 0., 0.5, 0.05, 0.9, 0.04,  1., 0.01);
  //customBinCreator(customBinning, 0., 0.5, 0.1, 0.9, 0.08,  1., 0.02);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetFirstHighestDeepFlavB_deepFlavB", normalizationCut, "BTagCaloDeepCSVp17Double; DeepFlavB^{1}; online efficliency", customBinning  , theColor);
  
  // =========================================================
  normalizationCut = normalizationCut + "&& BTagCaloDeepCSVp17Double>=2";
  filterCut = normalizationCut + "&& PFCentralJetLooseIDQuad30>=4";
  customBinning.clear();
  customBinCreator(customBinning, 20., 100., 5., 150., 10.,  250., 20.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetForthHighestPt_pt", normalizationCut, "PFCentralJetLooseIDQuad30; p_{T}^{4} [GeV]; online efficiency", customBinning, theColor);
  


  
  normalizationCut = normalizationCut;
  filterCut = normalizationCut + "&& 1PFCentralJetLooseID75>=1";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetFirstHighestPt_pt", normalizationCut, "1PFCentralJetLooseID75; p_{T}^{1} [GeV]; online efficiency", 50, 20 , 500, theColor);
  
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& 2PFCentralJetLooseID60>=2";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetSecondHighestPt_pt"         , normalizationCut, "2PFCentralJetLooseID60; p_{T}^{2} [GeV]; online efficiency"         ,50, 20 , 300, theColor);
  
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& 3PFCentralJetLooseID45>=3";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetThirdHighestPt_pt"         , normalizationCut, "3PFCentralJetLooseID45; p_{T}^{3} [GeV]; online efficiency"         ,50, 20 , 300, theColor);
  
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& 4PFCentralJetLooseID40>=4";
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetForthHighestPt_pt"         , normalizationCut, "4PFCentralJetLooseID40; p_{T}^{4} [GeV]; online efficiency"         ,40, 20 , 200, theColor);
  
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& PFCentralJetsLooseIDQuad30HT330_MaxHT>=330 && numberOfJetsPfHT>=4";
  customBinning.clear();
  customBinCreator(customBinning, 200., 300., 100., 1500., 30.);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "pfJetSum", normalizationCut, "PFCentralJetsLooseIDQuad30HT330; #sum p_{T} with p_{T}>30 GeV [GeV]; online efficiency"         ,customBinning, theColor);
  
  normalizationCut = filterCut;
  filterCut = normalizationCut + "&& BTagPFDeepCSV4p5Triple_jetFirstHighestDeepFlavB_triggerFlag>=1";
  customBinning.clear();
  if(isSingleMuon) customBinCreator(customBinning, 0., 0.8, 0.05, 1., 0.04);
  else             customBinCreator(customBinning, 0., 0.5, 0.05, 0.9, 0.04,  1., 0.01);
  theEfficiencyEvaluator.addTrigger(triggerName, filterCut, "jetFirstHighestDeepFlavB_deepFlavB", normalizationCut, "BTagPFDeepCSV4p5Triple; DeepFlavB^{1}; online efficliency"      , customBinning , theColor);
  
  theEfficiencyEvaluator.fillTriggerEfficiency();
  
  theOutputResultVector = theEfficiencyEvaluator.getEfficiencyAndDistribution();
}

void ProduceAllTriggerEfficienciesFiles2018(std::string singleMuonInputFileName, std::string ttbarInputFileName, std::string xyhInputSignal, std::string outputFileName, bool useTTbarCut)
{
  float luminosity = 59700.; //pb-1
  
  float ttbarCrossSection =   88.29; //pb
  float wjetCrossSection  = 61526.7; //pb
  float xyhCrossSection   =      1.; //pb
  
  float ttbarExpectedEvents = luminosity*ttbarCrossSection;
  float wjetExpectedEvents  = luminosity*wjetCrossSection ;
  float xyhExpectedEvents   = luminosity*xyhCrossSection  ;
    
  gROOT->SetBatch();

  std::vector<std::string> inputFilesNames = {singleMuonInputFileName, ttbarInputFileName , xyhInputSignal     };
  std::vector<std::string> datasetName     = {"SingleMuon"           , "TTbar"            , "NMSSM"            };
  std::vector<float>       expectedEvents  = {-1.                    , ttbarExpectedEvents, xyhExpectedEvents  };
  std::vector<Color_t>     theColorVector =  {kBlack                 , kBlue              , kRed               };
  std::vector<std::vector<std::tuple<std::shared_ptr<TGraphAsymmErrors>,std::shared_ptr<TH1F> > > > vectorOfDatasetResults(inputFilesNames.size());
  
  std::vector<std::thread> theThreadList;
  for(uint it =0; it<inputFilesNames.size(); ++it)
    {
      std::cout << "\n======== Input file name = "<<it<<"   "<<inputFilesNames.at(it)<<std::endl;
      theThreadList.emplace_back(std::thread(ProduceAllTriggerEfficiencyInAFile2018, std::ref(vectorOfDatasetResults[it]), std::ref(inputFilesNames[it]), std::ref(datasetName[it]), std::ref(expectedEvents[it]), std::ref(theColorVector[it]), useTTbarCut));
    }
  
  std::cout << "Size of the thread list = "<<theThreadList.size()<<std::endl;
  std::cout << "Creating the thread"<<std::endl;
  for(auto& theThread : theThreadList)
    {
      std::cout << "Join the threadlist"<<std::endl;
      theThread.join();
    }
  
  
  std::cout << "Recreate the Output file"<<std::endl;
  TFile outputFile(outputFileName.data(),"RECREATE");
  
  std::cout << "Write results "<<std::endl;
  for(auto& datasetVectorResult : vectorOfDatasetResults)
    {
      for(auto& efficiencyAndDistribution : datasetVectorResult)
        {
	  std::get<0>(efficiencyAndDistribution).get()->Write();
	  std::get<1>(efficiencyAndDistribution).get()->Write();
        }
    }
  
  std::cout << "Closing the file"<<std::endl;
  outputFile.Close();
  gROOT->SetBatch(false);
}

void ProduceAllTriggerEfficienciesFiles2017(std::string singleMuonInputFileName, std::string ttbarInputFileName, std::string xyhInputSignal, std::string outputFileName, bool useTTbarCut)
{
  float luminosity = 41476.072; // pb-1
    
  float ttbarCrossSection =   88.29; //pb
  float xyhCrossSection   =      1.; //pb
  
  float ttbarExpectedEvents = luminosity*ttbarCrossSection;
  float xyhExpectedEvents   = luminosity*xyhCrossSection  ;
  
  gROOT->SetBatch();

  std::vector<std::string> inputFilesNames = {singleMuonInputFileName, ttbarInputFileName , xyhInputSignal     };
  std::vector<std::string> datasetName     = {"SingleMuon"           , "TTbar"            , "NMSSM"            };
  std::vector<float>       expectedEvents  = {-1.                    , ttbarExpectedEvents, xyhExpectedEvents  };
  std::vector<Color_t>     theColorVector =  {kBlack                 , kBlue              , kRed               };
  std::vector<std::vector<std::tuple<std::shared_ptr<TGraphAsymmErrors>,std::shared_ptr<TH1F> > > > vectorOfDatasetResults(inputFilesNames.size());
  
  // marina
  std::cout << "\n ==== ProduceAllTriggerEfficienciesFiles2017"<<std::endl;
  std::vector<std::thread> theThreadList;
  for(uint it =0; it<inputFilesNames.size(); ++it)
    {
      theThreadList.emplace_back(std::thread(ProduceAllTriggerEfficiencyInAFile2017, std::ref(vectorOfDatasetResults[it]), std::ref(inputFilesNames[it]), std::ref(datasetName[it]), std::ref(expectedEvents[it]), std::ref(theColorVector[it]), useTTbarCut));
    }

  for(auto& theThread : theThreadList) theThread.join();
  TFile outputFile(outputFileName.data(),"RECREATE");
  for(auto& datasetVectorResult : vectorOfDatasetResults)
    {
      for(auto& efficiencyAndDistribution : datasetVectorResult)
        {
	  std::get<0>(efficiencyAndDistribution).get()->Write();
	  std::get<1>(efficiencyAndDistribution).get()->Write();
        }
    }
  outputFile.Close();
  gROOT->SetBatch(false);
}

void ProduceAllTriggerEfficiencies2017()
{
  ROOT::EnableThreadSafety();
  std::string DataFile = "root://cmseos.fnal.gov//store/user/mkolosov/HHHTo6B/TriggerStudies/Summer2017UL_TRGcurves_wTrgMatching_28Nov2022/SingleMuon_Run2018B/ntuple.root";
  std::string TTFile   = "root://cmseos.fnal.gov//store/user/mkolosov/HHHTo6B/TriggerStudies/Summer2017UL_TRGcurves_wTrgMatching_28Nov2022/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/ntuple.root";
  
  std::cout << "\n Will produce trigger efficiencies for 2017"<<std::endl;
  std::thread theMatchedTriggerThread(ProduceAllTriggerEfficienciesFiles2017, DataFile, TTFile, TTFile, "TriggerEfficiencies_BeforeFit_2017_wMatching.root", true);
  theMatchedTriggerThread.join();
}

void ProduceAllTriggerEfficiencies2018()
{
  ROOT::EnableThreadSafety();
  
  // With trigger-offline object matching
  std::string DataFile   = "Summer2018UL_TRGcurves_wTrgMatching_13Dec2022/SingleMuon/ntuple.root";
  std::string TTFile     = "Summer2018UL_TRGcurves_wTrgMatching_13Dec2022/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/ntuple.root";
  std::string SignalFile = "Summer2018UL_TRGcurves_wTrgMatching_13Dec2022/srosenzw_NMSSM_XYH_YToHH_6b_MX_700_MY_400_sl7_nano_2M/ntuple.root";
  
  //std::string DataFile   = "Summer2018UL_TRGcurves_woTrgMatching_13Dec2022/SingleMuon/ntuple.root";
  //std::string TTFile     = "Summer2018UL_TRGcurves_woTrgMatching_13Dec2022/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/ntuple.root";
  //std::string SignalFile = "Summer2018UL_TRGcurves_woTrgMatching_13Dec2022/srosenzw_NMSSM_XYH_YToHH_6b_MX_700_MY_400_sl7_nano_2M/ntuple.root"; 
  
  std::cout << "\n Will procude trigger efficiencies for 2018"<<std::endl;
  
  TFile* fData = TFile::Open("Summer2018UL_TRGcurves_wTrgMatching_13Dec2022/SingleMuon/ntuple.root");
  if (fData->IsZombie())
    {
      std::cout << "Problem opening file"<<std::endl;
      exit(-1);
    }
  else
    {
      std::cout << "Data file open"<<std::endl;
      TTree* tData = (TTree*)fData->Get("TrgTree");
      std::cout <<"Entries = "<<tData->GetEntries()<<std::endl;
      
      Long64_t nentries = tData->GetEntries();
      for (Long64_t i = 0; i < nentries; i++) {
	std::cout << "i="<<i<<std::endl;
	
	tData->GetEntry(i);
      }
    }




  std::thread theMatchedTriggerThread(ProduceAllTriggerEfficienciesFiles2018, DataFile, TTFile, SignalFile, "TriggerEfficiencyByFilter_BeforeFit_2018_wMatching.root", true);
  theMatchedTriggerThread.join();
}

void TriggerEfficiencyByFilter()
{
  ProduceAllTriggerEfficiencies2018();
}
